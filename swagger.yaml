openapi: 3.0.3
info:
  title: Secure Express API
  description: |
    A secure Express.js API with MongoDB, JWT authentication, CSRF protection, and rate limiting for user management. Refresh tokens are stored in MongoDB for secure validation.  
    **CSRF Protection**: All POST, PUT, and DELETE requests require the `X-XSRF-TOKEN` header, which must match the `XSRF-TOKEN` cookie. To obtain the `XSRF-TOKEN` cookie and token value, send a GET request to `/auth/csrf-token`. For testing in Postman, enable the cookie jar and extract the `XSRF-TOKEN` cookie value or use the JSON response `{ "XSRF-TOKEN": "<token>" }` to set the `X-XSRF-TOKEN` header.
  version: 1.0.0
servers:
  - url: http://{host}:{port}/
    description: Local development server (host and port depend on the device's configuration)
    variables:
      host:
        default: localhost
        description: Hostname or IP address of the device running the server
      port:
        default: "5002"
        description: Port defined in environment variable PORT or default 5002
  - url: https://your-production-url/
    description: Production server
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: JWT access token stored in an HTTP-only cookie for authentication.
    refreshTokenCookie:
      type: apiKey
      in: cookie
      name: refreshToken
      description: Refresh token stored in an HTTP-only cookie for token refresh.
    csrfToken:
      type: apiKey
      in: header
      name: X-XSRF-TOKEN
      description: |
        CSRF token required for POST, PUT, DELETE requests. The value must match the `XSRF-TOKEN` cookie or the token returned in the JSON response from `GET /auth/csrf-token`.  
        **How to obtain**: Send a `GET` request to `/auth/csrf-token` to receive the `XSRF-TOKEN` cookie and a JSON response `{ "XSRF-TOKEN": "<token>" }`. Use the JSON token value as the `X-XSRF-TOKEN` header in mutating requests.  
        **Example in Postman**:  
        1. Send `GET http://localhost:5002/auth/csrf-token` to get the `XSRF-TOKEN` cookie and JSON response.  
        2. Copy the `XSRF-TOKEN` value from the JSON response.  
        3. Add `X-XSRF-TOKEN: [value]` as a header in your POST/PUT/DELETE request.  
        4. Ensure cookies (`_csrf` and `XSRF-TOKEN`) are sent with the request (enable cookie jar in Postman).
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: The user's unique ID.
          example: 507f1f77bcf86cd799439011
        username:
          type: string
          description: The user's username.
          example: testuser
        email:
          type: string
          description: The user's email address.
          example: test@example.com
    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
          example: error
        message:
          type: string
          example: Error del servidor
        errors:
          type: array
          items:
            type: object
            properties:
              msg:
                type: string
              param:
                type: string
              location:
                type: string
              value:
                type: string
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: User's username (min 4 characters).
          example: testuser
        email:
          type: string
          description: User's email address.
          example: test@example.com
        password:
          type: string
          description: User's password (min 8 characters).
          example: secure123
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User's email address.
          example: test@example.com
        password:
          type: string
          description: User's password.
          example: secure123
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh token to obtain a new access token (can also be provided via the `refreshToken` cookie).
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: New username (optional, min 4 characters).
          example: newusername
        email:
          type: string
          description: New email address (optional).
          example: newemail@example.com
paths:
  /auth/csrf-token:
    get:
      summary: Get CSRF token
      description: |
        Retrieves a CSRF token required for POST, PUT, and DELETE requests. The response includes the token in a JSON object `{ "XSRF-TOKEN": "<token>" }` and sets the `XSRF-TOKEN` cookie. The `X-XSRF-TOKEN` header in subsequent requests must match this token.
      tags:
        - Authentication
      responses:
        "200":
          description: CSRF token retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  XSRF-TOKEN:
                    type: string
                    description: The CSRF token to be used as the `X-XSRF-TOKEN` header.
                    example: MjRnGHiI-y-phq5krRoviM6eghVmk8sI3028
          headers:
            Set-Cookie:
              schema:
                type: string
                example: XSRF-TOKEN=MjRnGHiI-y-phq5krRoviM6eghVmk8sI3028; Path=/; SameSite=Lax
  /auth/register:
    post:
      summary: Registrar un nuevo usuario
      description: |
        Crea una nueva cuenta de usuario, almacena un refresh token en MongoDB y devuelve un JWT y un refresh token en cookies HTTP-only.  
        **Requerimiento CSRF**: Incluye el header `X-XSRF-TOKEN` con el valor del token CSRF obtenido de `GET /auth/csrf-token`.
      tags:
        - Authentication
      security:
        - csrfToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=86400000; refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=604800000
        "400":
          description: Entrada inválida o correo ya registrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: El correo ya está registrado
        "403":
          description: Token CSRF inválido o ausente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: invalid csrf token
        "500":
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: Error del servidor al registrar el usuario
  /auth/login:
    post:
      summary: Iniciar sesión
      description: |
        Autentica a un usuario, almacena un refresh token en MongoDB y devuelve un JWT y un refresh token en cookies HTTP-only.  
        **Requerimiento CSRF**: Incluye el header `X-XSRF-TOKEN` con el valor del token CSRF obtenido de `GET /auth/csrf-token`.
      tags:
        - Authentication
      security:
        - csrfToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Inicio de sesión exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=86400000; refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=604800000
        "400":
          description: Credenciales inválidas o entrada incorrecta
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                examples:
                  missingFields:
                    value:
                      status: error
                      message: El correo y la contraseña son obligatorios
                  invalidEmail:
                    value:
                      status: error
                      message: El correo no es válido
                  invalidPassword:
                    value:
                      status: error
                      message: La contraseña es incorrecta
        "404":
          description: Correo no registrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: El correo no está registrado
        "403":
          description: Token CSRF inválido o ausente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: invalid csrf token
        "429":
          description: Demasiados intentos de inicio de sesión
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: Too many login attempts, please try again later
        "500":
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: Error del servidor al iniciar sesión
  /auth/refresh-token:
    post:
      summary: Renovar token de acceso
      description: |
        Genera un nuevo token de acceso usando un refresh token válido proporcionado en el cuerpo de la solicitud o en la cookie `refreshToken`, validado contra MongoDB.  
        **Requerimiento CSRF**: Incluye el header `X-XSRF-TOKEN` con el valor del token CSRF obtenido de `GET /auth/csrf-token`.
      tags:
        - Authentication
      security:
        - csrfToken: []
        - refreshTokenCookie: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RefreshTokenRequest"
      responses:
        "200":
          description: Token renovado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=86400000
        "401":
          description: Refresh token inválido o expirado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                examples:
                  noRefreshToken:
                    value:
                      status: error
                      message: No se proporcionó un refresh token
                  invalidRefreshToken:
                    value:
                      status: error
                      message: Refresh token inválido o expirado
                  tokenNotFound:
                    value:
                      status: error
                      message: Refresh token no encontrado
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: Usuario no encontrado
        "403":
          description: Token CSRF inválido o ausente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: invalid csrf token
        "500":
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: Error del servidor al renovar el token
  /auth/logout:
    post:
      summary: Cerrar sesión
      description: |
        Limpia las cookies de JWT y refresh token y elimina el refresh token de MongoDB.  
        **Requerimiento CSRF**: Incluye el header `X-XSRF-TOKEN` con el valor del token CSRF obtenido de `GET /auth/csrf-token`.
      tags:
        - Authentication
      security:
        - csrfToken: []
      responses:
        "200":
          description: Sesión cerrada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Sesión cerrada correctamente
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=; HttpOnly; Secure; SameSite=Strict; Max-Age=0; refreshToken=; HttpOnly; Secure; SameSite=Strict; Max-Age=0
        "403":
          description: Token CSRF inválido o ausente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: invalid csrf token
        "500":
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: Error del servidor al cerrar sesión
  /users/profile:
    get:
      summary: Obtener perfil de usuario
      description: Recupera el perfil del usuario autenticado usando el JWT en la cookie `token`.
      tags:
        - User
      security:
        - cookieAuth: []
      responses:
        "200":
          description: Perfil de usuario recuperado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "401":
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: No autorizado
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: Usuario no encontrado
        "500":
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: Error del servidor
    put:
      summary: Actualizar perfil de usuario
      description: |
        Actualiza el nombre de usuario o correo del usuario autenticado usando el JWT en la cookie `token`.  
        **Requerimiento CSRF**: Incluye el header `X-XSRF-TOKEN` con el valor del token CSRF obtenido de `GET /auth/csrf-token`.
      tags:
        - User
      security:
        - cookieAuth: []
        - csrfToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: Perfil actualizado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          description: Entrada inválida
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: Entrada inválida
        "401":
          description: No autorizado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: No autorizado
        "403":
          description: Token CSRF inválido o ausente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: invalid csrf token
        "404":
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: Usuario no encontrado
        "500":
          description: Error del servidor
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
                example:
                  status: error
                  message: Error del servidor
