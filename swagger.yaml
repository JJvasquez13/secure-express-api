openapi: 3.0.3
info:
  title: Secure Express API
  description: |
    A secure Express.js API with MongoDB, JWT authentication, CSRF protection, and rate limiting for user management. Refresh tokens are stored in MongoDB for secure validation.  
    **CSRF Protection**: All POST, PUT, and DELETE requests require the `X-XSRF-TOKEN` header, which must match the `XSRF-TOKEN` cookie. To obtain the `XSRF-TOKEN` cookie, send a GET request to any endpoint (e.g., `GET /`). For testing in Postman, enable the cookie jar and extract the `XSRF-TOKEN` cookie value to use as the `X-XSRF-TOKEN` header.
  version: 1.0.0
servers:
  - url: http://{host}:{port}/
    description: Local development server (host and port depend on the device's configuration)
    variables:
      host:
        default: localhost
        description: Hostname or IP address of the device running the server
      port:
        default: "5000"
        description: Port defined in environment variable PORT or default 5000
  - url: https://your-production-url/
    description: Production server
components:
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: token
      description: JWT access token stored in an HTTP-only cookie for authentication.
    refreshTokenCookie:
      type: apiKey
      in: cookie
      name: refreshToken
      description: Refresh token stored in an HTTP-only cookie for token refresh.
    csrfToken:
      type: apiKey
      in: header
      name: X-XSRF-TOKEN
      description: |
        CSRF token required for POST, PUT, DELETE requests. The value must match the `XSRF-TOKEN` cookie, which is set automatically in the response of any request (e.g., `GET /`).  
        **How to obtain**: Send a `GET` request to any endpoint (e.g., `GET /`) to receive the `XSRF-TOKEN` cookie. Extract its value and include it as the `X-XSRF-TOKEN` header in mutating requests. In Postman, enable the cookie jar and use the `Cookies` tab to retrieve the `XSRF-TOKEN` value.  
        **Example in Postman**:  
        1. Send `GET http://localhost:5000/` to get the `XSRF-TOKEN` cookie.  
        2. Copy the `XSRF-TOKEN` value from the `Cookies` tab.  
        3. Add `X-XSRF-TOKEN: [value]` as a header in your POST/PUT/DELETE request.
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: The user's unique ID.
          example: 507f1f77bcf86cd799439011
        username:
          type: string
          description: The user's username.
          example: testuser
        email:
          type: string
          description: The user's email address.
          example: test@example.com
    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error]
          example: error
        message:
          type: string
          example: Something went wrong!
        errors:
          type: array
          items:
            type: object
            properties:
              msg:
                type: string
              param:
                type: string
              location:
                type: string
              value:
                type: string
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: User's username (min 4 characters).
          example: testuser
        email:
          type: string
          description: User's email address.
          example: test@example.com
        password:
          type: string
          description: User's password (min 8 characters).
          example: secure123
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          description: User's email address.
          example: test@example.com
        password:
          type: string
          description: User's password.
          example: secure123
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          description: Refresh token to obtain a new access token (can also be provided via the `refreshToken` cookie).
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
    UpdateUserRequest:
      type: object
      properties:
        username:
          type: string
          description: New username (optional, min 4 characters).
          example: newusername
        email:
          type: string
          description: New email address (optional).
          example: newemail@example.com
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: |
        Creates a new user account, stores a refresh token in MongoDB, and returns a JWT and refresh token in HTTP-only cookies.  
        **CSRF Requirement**: Include the `X-XSRF-TOKEN` header with the value of the `XSRF-TOKEN` cookie, obtained via a prior `GET` request (e.g., `GET /`).
      tags:
        - Authentication
      security:
        - csrfToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=86400000; refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=604800000
        '400':
          description: Invalid input or email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid or missing CSRF token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                example:
                  status: error
                  message: invalid csrf token
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/login:
    post:
      summary: Log in a user
      description: |
        Authenticates a user, stores a refresh token in MongoDB, and returns a JWT and refresh token in HTTP-only cookies.  
        **CSRF Requirement**: Include the `X-XSRF-TOKEN` header with the value of the `XSRF-TOKEN` cookie, obtained via a prior `GET` request (e.g., `GET /`).
      tags:
        - Authentication
      security:
        - csrfToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=86400000; refreshToken=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=604800000
        '400':
          description: Invalid credentials or too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid or missing CSRF token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                example:
                  status: error
                  message: invalid csrf token
        '429':
          description: Too many login attempts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/refresh-token:
    post:
      summary: Refresh access token
      description: |
        Generates a new access token using a valid refresh token provided in the request body or `refreshToken` cookie, validated against MongoDB.  
        **CSRF Requirement**: Include the `X-XSRF-TOKEN` header with the value of the `XSRF-TOKEN` cookie, obtained via a prior `GET` request (e.g., `GET /`).
      tags:
        - Authentication
      security:
        - csrfToken: []
        - refreshTokenCookie: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...; HttpOnly; Secure; SameSite=Strict; Max-Age=86400000
        '401':
          description: Invalid or expired refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid or missing CSRF token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                example:
                  status: error
                  message: invalid csrf token
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /auth/logout:
    post:
      summary: Log out a user
      description: |
        Clears the JWT and refresh token cookies and removes the refresh token from MongoDB.  
        **CSRF Requirement**: Include the `X-XSRF-TOKEN` header with the value of the `XSRF-TOKEN` cookie, obtained via a prior `GET` request (e.g., `GET /`).
      tags:
        - Authentication
      security:
        - csrfToken: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Logged out successfully
          headers:
            Set-Cookie:
              schema:
                type: string
                example: token=; HttpOnly; Secure; SameSite=Strict; Max-Age=0; refreshToken=; HttpOnly; Secure; SameSite=Strict; Max-Age=0
        '403':
          description: Invalid or missing CSRF token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                example:
                  status: error
                  message: invalid csrf token
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/profile:
    get:
      summary: Get user profile
      description: Retrieves the authenticated user's profile using the JWT in the `token` cookie.
      tags:
        - User
      security:
        - cookieAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Update user profile
      description: |
        Updates the authenticated user's username or email using the JWT in the `token` cookie.  
        **CSRF Requirement**: Include the `X-XSRF-TOKEN` header with the value of the `XSRF-TOKEN` cookie, obtained via a prior `GET` request (e.g., `GET /`).
      tags:
        - User
      security:
        - cookieAuth: []
        - csrfToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Not authorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Invalid or missing CSRF token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
                example:
                  status: error
                  message: invalid csrf token
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
